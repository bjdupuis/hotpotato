<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd" [
    <!ENTITY % CustomDTD SYSTEM "../custom.dtd">
    %CustomDTD;
    ]>
<chapter id="quickstart">
  <title>Quick start</title>
  <subtitle>Getting started with hotpotato's basics</subtitle>

  <sect1>
    <title>Dependencies</title>
    <para>
      In order to run &hotpotato; you'll need only JDK 1.6 and &Netty;. Its heavily based on Netty so you'll be dealing
      with some of its HTTP classes and API's.
    </para>
    <para>
      There was no real reason to hide this API just to spend useless CPU cycles converting between both lib's API's.
    </para>
  </sect1>

  <sect1>
    <title>Your very first request</title>
    <para>Simplest http client example with 1 get to some server</para>
    <para>
      To implement the DISCARD protocol, the only thing you need to do is
      to ignore all received data. Let us start straight from the handler
      implementation, which handles I/O events generated by Netty.
    </para>
    <programlisting>
import org.factor45.hotpotato.client.DefaultHttpClient;
import org.factor45.hotpotato.client.HttpClient;
import org.factor45.hotpotato.request.HttpRequestFuture;
import org.jboss.netty.handler.codec.http.DefaultHttpRequest;
import org.jboss.netty.handler.codec.http.HttpMethod;
import org.jboss.netty.handler.codec.http.HttpRequest;
import org.jboss.netty.handler.codec.http.HttpVersion;
...

// Create &amp; initialise the client <co id="example1.co1" />
HttpClient client = new DefaultHttpClient();
if (!client.init()) {
    return;
}

// Setup the request <co id="example1.co2" />
HttpRequest request =
    new DefaultHttpRequest(HttpVersion.HTTP_1_0, HttpMethod.GET, "/");

// Execute the request <co id="example1.co3" />
HttpRequestFuture future = client.execute("hotpotato.factor45.org", 80, request);
future.awaitUninterruptibly();
System.out.println(future);

// Cleanup <co id="example1.co4" />
client.terminate();
    </programlisting>
    <calloutlist>
      <callout arearefs="example1.co1">
        <para>
          Every client must be initialised before being used. By default, you can simply call
          <methodname>init()</methodname> on a new instance without configuration. We'll address configuration later.
        </para>
        <para>
          As a future reference, the same client can be used by multiple threads at the same time - that's kind of its
          purpose actually. So you might consider using the same instance across your application.
        </para>
      </callout>
      <callout arearefs="example1.co2">
        <para>
          The HTTP requests are &Netty;'s API. Every header must be manually set prior to the execution request.
        </para>
      </callout>
      <callout arearefs="example1.co3">
        <para>
          The request is executed by calling one of the variants of <methodname>execute()</methodname> on a initialised
          &HttpClient;. This returns a &HttpRequestFuture;. We'll cover the futures shortly so for now just keep in mind
          its what allows you to execute requests wither synchronously or asynchronously. Calling
          <methodname>awaitUninterruptibly()</methodname> on a future will cause the calling thread to halt until
          the future completes, either due to timeout, failure, success or cancelation.
        </para>
        <para>
          For the sake of first example simplicity, this particular version of <methodname>execute()</methodname>
          discards the request result.
        </para>
        <para>
          After the request is executed, the future is printed out to the console so you can see the response status.
        </para>
      </callout>
      <callout arearefs="example1.co4">
        <para>
          Every client should always be terminated once it's no longer necessary.
        </para>
      </callout>
    </calloutlist>
  </sect1>

  <sect1>
    <title>Processing responses</title>
    <para>
      Using the
      <code>HttpResponseProcessor</code>
    </para>
  </sect1>

  <sect1>
    <title>Messing around with headers and body</title>
    <para>
      Example with an HTTP post.
    </para>
  </sect1>

  <sect1>
    <title>Synchronous vs asynchronous</title>
    <para>
      Dealing with<code>HttpRequestFuture</code>, etc.
    </para>
  </sect1>

  <sect1>
    <title>Shutting down and cleaning resources</title>
    <para>client.terminate()</para>
  </sect1>

  <sect1>
    <title>Summary</title>
    <para>
      In this chapter we covered the necessary bla bla bla...
    </para>
  </sect1>
</chapter>