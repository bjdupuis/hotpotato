<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd" [
    <!ENTITY % CustomDTD SYSTEM "../custom.dtd">
    %CustomDTD;
    ]>
<chapter id="quickstart">
  <title>Quick start</title>
  <subtitle>Getting started with hotpotato's basics</subtitle>

  <sect1>
    <title>Dependencies</title>
    <para>Netty, JDK 1.5/1.6</para>
  </sect1>

  <sect1>
    <title>Your very first request</title>
    <para>Simplest http client example with 1 get to some server</para>
    <para>
      To implement the DISCARD protocol, the only thing you need to do is
      to ignore all received data.  Let us start straight from the handler
      implementation, which handles I/O events generated by Netty.
    </para>

    <programlisting>package org.jboss.netty.example.discard;

      public class DiscardServerHandler extends &SimpleChannelHandler; {<co id="example.discard.co1"/>

      @Override
      public void messageReceived(&ChannelHandlerContext; ctx, &MessageEvent; e) {<co id="example.discard.co2"/>
      }

      @Override
      public void exceptionCaught(&ChannelHandlerContext; ctx, &ExceptionEvent; e) {<co id="example.discard.co3"/>

      e.getCause().printStackTrace();

      &Channel; ch = e.getChannel();
      ch.close();
      }
      }</programlisting>
  </sect1>

  <sect1>
    <title>Processing responses</title>
    <para>
      Using the
      <code>HttpResponseProcessor</code>
    </para>
  </sect1>

  <sect1>
    <title>Messing around with headers and body</title>
    <para>
      Example with an HTTP post.
    </para>
  </sect1>

  <sect1>
    <title>Synchronous vs asynchronous</title>
    <para>
      Dealing with<code>HttpRequestFuture</code>, etc.
    </para>
  </sect1>

  <sect1>
    <title>Shutting down and cleaning resources</title>
    <para>client.terminate()</para>
  </sect1>

  <sect1>
    <title>Summary</title>
    <para>
      In this chapter we covered the necessary bla bla bla...
    </para>
  </sect1>
</chapter>